@Repository
public interface ExampleRepository extends CassandraRepository<ExampleEntity, UUID> {

    @Query("UPDATE example_table USING TTL :ttl SET column_a = column_a WHERE id = :id")
    void updateColumnTTL(@Param("id") UUID id, @Param("ttl") int ttl);

}



import java.util.Arrays;
import java.util.List;

class Address {
    private String city;
    private String state;

    public Address(String city, String state) {
        this.city = city;
        this.state = state;
    }

    public String getCity() {
        return city;
    }

    public String getState() {
        return state;
    }
}

class Person {
    private String name;
    private int age;
    private List<Address> addresses; // List of addresses

    public Person(String name, int age, List<Address> addresses) {
        this.name = name;
        this.age = age;
        this.addresses = addresses;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public List<Address> getAddresses() {
        return addresses;
    }
}

public class Main {
    public static void main(String[] args) {
        Address address1 = new Address("New York", "NY");
        Address address2 = new Address("Los Angeles", "CA");

        Person person1 = new Person("John", 30, Arrays.asList(address1, address2));
        Person person2 = new Person("John", 30, Arrays.asList(
            new Address("New York", "NY"),
            new Address("Los Angeles", "CA")
        ));

        boolean areEqual = comparePersons(person1, person2);
        System.out.println("Are persons equal? " + areEqual); // true
    }

    public static boolean comparePersons(Person p1, Person p2) {
        // Compare name and age
        if (!p1.getName().equals(p2.getName()) || p1.getAge() != p2.getAge()) {
            return false;
        }

        // Compare addresses list sizes
        List<Address> addresses1 = p1.getAddresses();
        List<Address> addresses2 = p2.getAddresses();
        if (addresses1.size() != addresses2.size()) {
            return false;
        }

        // Compare each address using a for loop
        for (int i = 0; i < addresses1.size(); i++) {
            Address a1 = addresses1.get(i);
            Address a2 = addresses2.get(i);

            if (!a1.getCity().equals(a2.getCity()) || !a1.getState().equals(a2.getState())) {
                return false;
            }
        }

        // All fields match
        return true;
    }
}
